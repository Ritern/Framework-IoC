/*----------------------------------------------------------------
            // Copyright © 2014-2016 Air2000
            // 
            // FileName: ICommandBinding.cs
			// Describle:
			// Created By:  Wells Hsu
			// Date&Time:  2016/9/18 16:47:34
            // Modify History:
            //
//----------------------------------------------------------------*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Air2000.IoC.Core;

namespace Air2000.IoC.Extensions.Command
{
    public interface ICommandBinding:IBinding
    {
        /// <summary>
        /// Declares that the Binding is a one-off.As soon as it's satisfied , it will be unmapped.
        /// </summary>
        /// <returns></returns>
        ICommandBinding Once();

        /// <summary>
        /// Get/set the property set to 'true' by 'Once()'
        /// </summary>
        bool isOneOff { get; set; }

        /// <summary>
        /// Declares that the bound commands will be run in parallel.
        /// Parallel is the defalut.There is no need to call this unless you're changing from sequence.
        /// </summary>
        /// <returns></returns>
        ICommandBinding InParallel();

        /// <summary>
        /// Declares that the Commands generated by this binding will be pooled.
        /// </summary>
        /// <returns></returns>
        ICommandBinding InSequence();

        /// <summary>
        /// Get/set the propterty set by InSequence() and InParallel()
        /// </summary>
        /// <returns></returns>
        bool isSequence { get; set; }

        /// <summary>
        /// Get/set the propterty set by Pooled()
        /// </summary>
        /// <returns></returns>
        bool isPooled { get; set; }

        new ICommandBinding Bind<T>();
        new ICommandBinding Bind(object key);
        new ICommandBinding To<T>();
        new ICommandBinding To(object o);
        new ICommandBinding ToName<T>();
        new ICommandBinding ToName(object o);
        new ICommandBinding Named<T>();
        new ICommandBinding Named(object o);
    }
}
